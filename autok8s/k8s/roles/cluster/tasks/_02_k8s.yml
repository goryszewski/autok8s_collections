- name: Download files crds.yaml
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/crds.yaml
    dest: /etc/kubernetes/config/
  register: touch_crds

- name: kubectl apply crds.yaml
  ansible.builtin.command: kubectl apply -f /etc/kubernetes/config/crds.yaml
  ignore_errors: true
  run_once: true

- name: "Wait for crds ippools.crd.projectcalico.org"
  ansible.builtin.command: kubectl get customresourceDefinition ippools.crd.projectcalico.org
  register: register_result_crds
  until: register_result_crds.rc == 0
  retries: 20
  delay: 5

# file calico-typha-certs

- name: Is exist calico-typha-certs
  ansible.builtin.shell: kubectl get secret -A | grep calico-typha-certs
  ignore_errors: true
  register: register_result_calico_typha_certs

- name: If not Exist  calico-typha-certs
  ansible.builtin.command: "kubectl create secret generic -n kube-system calico-typha-certs --from-file=/etc/kubernetes/pki/typha.key --from-file=/etc/kubernetes/pki/typha.pem"
  run_once: true
  when: register_result_calico_typha_certs.rc == 1

# file calico-node-certs

- name: Is exist calico-node-certs
  ansible.builtin.shell: kubectl get secret -A | grep calico-node-certs
  ignore_errors: true
  register: register_result_calico_node_certs

- name: If not Exist  calico-node-certs
  ansible.builtin.command: "kubectl create secret generic -n kube-system calico-node-certs --from-file=/etc/kubernetes/pki/calico-node.key --from-file=/etc/kubernetes/pki/calico-node.pem"
  run_once: true
  when: register_result_calico_node_certs.rc == 1

# file calico-typha-ca

- name: Is exist calico-typha-ca
  ansible.builtin.shell: kubectl get configmap -A | grep calico-typha-ca
  ignore_errors: true
  register: register_result_calico_typha_ca

- name: If not Exist  calico-typha-ca
  ansible.builtin.command: "kubectl create configmap -n kube-system calico-typha-ca --from-file=/etc/kubernetes/pki/ca_typha.pem"
  run_once: true
  when: register_result_calico_typha_ca.rc == 1

# end FILE

# BEGIN RBAC

- name: Copy a file to calico01_RBAC.yml
  ansible.builtin.copy:
    src: calico01_RBAC.yml
    dest: /etc/kubernetes/config/calico01_RBAC.yml


- name: kubectl apply calico01_RBAC
  ansible.builtin.command: kubectl apply -f /etc/kubernetes/config/calico01_RBAC.yml
  ignore_errors: true
  run_once: true
# END RBAC

# BEGIN RuntimeClass

- name: Copy a file to RuntimeClass.yaml
  ansible.builtin.copy:
    src: RuntimeClass.yaml
    dest: /etc/kubernetes/config/RuntimeClass.yaml


- name: kubectl apply RuntimeClass.yaml
  ansible.builtin.command: kubectl apply -f /etc/kubernetes/config/RuntimeClass.yaml
  ignore_errors: true
  run_once: true
# END RuntimeClass
